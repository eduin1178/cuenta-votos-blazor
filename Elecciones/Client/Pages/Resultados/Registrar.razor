@page "/Resultados/Registrar"
@using Microsoft.AspNetCore.SignalR.Client;
@inject StorageConfig _storageConfig
<Card>
    <Header>
        Registrar resultados
    </Header>

    <Body>

        @if (Proceso == null)
        {
            <p>No se ha creado el proceso electoral</p>
        }
        else
        {
            if (!Proceso.Abierto)
            {
                <div class="alert alert-info">

                <h5>
                    <i class="oi oi-info"></i>
                    El proceso se encuentra cerrado para el registro</h5>
                <p>El proceso de registro estará abierto entre  <strong> @Proceso.Inicia y @Proceso.Termina </strong></p>
                </div>
            }
            else
            {
                <div class="row mb-3">
                    <div class="col-lg-4">
                        <label>Cargo</label>
                        <select class="form-select" value="@IdCargo" @onchange="AlCambiarCargo">
                            @if (ListaCargos != null)
                            {
                                if (ListaCargos.Count > 0)
                                {
                                    foreach (var item in ListaCargos)
                                    {
                                        <option value="@item.Id">@item.Nombre</option>

                                    }
                                }
                                else
                                {
                                    <option>No hay cargos</option>
                                }
                            }
                            else
                            {
                                <option value="0">Cargando...</option>
                            }
                        </select>
                    </div>
                    <div class="col-lg-4">
                        <label>Puesto</label>
                        <select class="form-select" value="@IdPuesto" @onchange="AlCambiarPuesto">
                            @if (Puestos == null)
                            {
                                <option>Cargando...</option>
                            }
                            else
                            {
                                @foreach (var puesto in Puestos)
                                {
                                    <option value="@puesto.Id">@puesto.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-lg-4">
                        <label>Mesa</label>
                        <select class="form-select" value="@IdMesa" @onchange="AlCambiarMesa">
                            @if (Puestos == null)
                            {
                                <option>Cargando...</option>
                            }
                            else
                            {
                                if (IdPuesto == 0)
                                {
                                    <option>Cargando...</option>
                                }
                                else
                                {
                                    @foreach (var mesa in Puestos.FirstOrDefault(x => x.Id == IdPuesto).ListaMesas.OrderBy(x =>
                                   x.Number).ToList())
                                    {
                                        <option value="@mesa.Id">@mesa.Name</option>
                                    }
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">

                        <ProgressBar Visible="_apiClient.Cargando" />
                    </div>
                </div>
                <div class="row">
                    @if (Resultados != null)
                    {

                        @foreach (var resultado in Resultados)
                        {
                            <div class="col-lg-6 col-xl-4 col-md-12 col-sm-12 col-xs-12 mb-2">

                                <Card>
                                    <Header>
                                        <button class="btn btn-link text-dark btn-sm float-end"
                                        @onclick="(()=>resultado.ToggleExpandido())">
                                            @if (resultado.Expandido)
                                            {
                                                <i class="oi oi-collapse-up"></i>

                                            }
                                            else
                                            {
                                                <i class="oi oi-expand-down"></i>
                                            }
                                        </button>
                                        <div class="flex-row d-flex align-items-center gap-3">
                                            <img src="@($"{_storageConfig.CDNUrlBase}/{resultado.LogoPartido}")" width="40" height="40" />
                                            <span class="align-content-center">
                                                <strong>
                                                    @resultado.NombrePartido
                                                </strong>
                                            </span>
                                        </div>
                                    </Header>

                                    <Body>
                                        @if (resultado.Expandido)
                                        {
                                            @foreach (var detalle in resultado.Detalles)
                                            {
                                                <div class="flex-column d-flex align-items-baseline">
                                                    <div class="flex-row d-flex align-items-center gap-3">
                                                        <img src="@($"{_storageConfig.CDNUrlBase}/{@detalle.FotoCandidatoUrl}")" width="50" height="70" class="rounded-5" />
                                                        <div class="row">
                                                            <div class="col">
                                                                <strong>
                                                                    @detalle.NombreCandidato
                                                                </strong>
                                                                <input type="number" class="form-control" placeholder="Votos"
                                                                @bind="detalle.VotosCandidato" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </Body>
                                </Card>
                            </div>
                        }
                    }
                </div>
                @if (IdPuesto != 0 && IdMesa != 0 && IdCargo != 0)
                {

                    <div class="row mb-3">
                        <div class="d-flex">
                            <div class="col-lg-4">
                                <button class="btn btn-success" title="Guardar datos" @onclick="Guardar">
                                    <i class="oi oi-check"></i> Guardar
                                </button>
                            </div>

                            <div class="col-lg-8">
                                <span>Cargar foto del formulario E14</span>

                                <FileUpload AutoUpload="false" FilePath="@_storageConfig.PircuresPath"
                                            Container="@_storageConfig.Container" MaxAllowedFiles="1"
                                            MaxFileSize="@_storageConfig.MaxFileSize" OnUploadSuccess="AlCargarActa" />

                            </div>

                        </div>

                    </div>

                }
            }
        }

    </Body>
</Card>

@inject ApiClient _apiClient
@inject IToaster _toaster
@implements IDisposable
@inject NavigationManager _navigation
@code {
    protected override void OnInitialized()
    {
        _apiClient.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        _apiClient.OnChange -= StateHasChanged;
    }
    protected override async Task OnInitializedAsync()
    {
        await CargarProceso();
        await CargarCargos();
        await CargarPuestos();
        CargarMesas();
        await CargarResultados();
    }

    public Proceso Proceso { get; set; }

    protected async Task CargarProceso()
    {
        var res = await _apiClient.GetAsync<Proceso>("api/Procesos/1");
        if (res.IsSuccess)
        {
            Proceso = res.Model;
        }
        else
        {
            _toaster.Error(res.Message);
        }
    }

    public List<PuestoModel> Puestos { get; set; }
    public int IdPuesto { get; set; }
    public int IdMesa { get; set; }

    protected async Task CargarPuestos()
    {
        var res = await _apiClient.GetAsync<List<PuestoModel>>("api/Users/Puestos");
        if (res.IsSuccess)
        {
            Puestos = res.Model.OrderBy(x => x.Number).ToList();
            if (Puestos.Count > 0)
            {
                IdPuesto = Puestos.FirstOrDefault().Id;
            }
            else
            {
                _toaster.Error("El usuario no tiene puestos asignados");
            }
        }
        else
        {
            Puestos = new List<PuestoModel>();
            _toaster.Error(res.Message);
        }
    }
    protected async void AlCambiarPuesto(ChangeEventArgs e)
    {
        IdPuesto = Convert.ToInt32(e.Value);
        CargarMesas();
        await CargarResultados();
    }

    protected void CargarMesas()
    {
        if (Puestos.Count > 0)
        {
            var puesto = Puestos.FirstOrDefault(x => x.Id == IdPuesto);
            if (puesto.ListaMesas.Count > 0)
            {
                IdMesa = puesto.ListaMesas.OrderBy(x => x.Number).ToList().First().Id;
            }
            else
            {
                IdMesa = 0;
                _toaster.Error("El usuario no tiene mesas asignadas");
            }
        }
    }
    protected async void AlCambiarMesa(ChangeEventArgs e)
    {
        IdMesa = Convert.ToInt32(e.Value);
        await CargarResultados();
    }

    public int IdCargo { get; set; }
    public List<Cargo> ListaCargos { get; set; }
    protected async Task CargarCargos()
    {
        var res = await _apiClient.GetAsync<List<Cargo>>("api/Cargos");
        if (res.IsSuccess)
        {
            ListaCargos = res.Model.OrderBy(x => x.Id).ToList();
            if (ListaCargos.Count > 0)
            {
                IdCargo = ListaCargos.FirstOrDefault().Id;
            }
            else
            {
                _toaster.Error("No hay cargos registrados");
            }
        }
        else
        {
            _toaster.Error(res.Message);
            ListaCargos = new List<Cargo>();
        }
    }
    protected async Task AlCambiarCargo(ChangeEventArgs e)
    {
        IdCargo = Convert.ToInt32(e.Value);
        await CargarResultados();
    }

    public List<ResultadoModel> Resultados { get; set; }
    protected async Task CargarResultados()
    {
        var res = await _apiClient.GetAsync<List<ResultadoModel>>($"api/Resultados/{IdPuesto}/{IdMesa}/{IdCargo}");
        if (res.IsSuccess)
        {
            Resultados = res.Model;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            _toaster.Error(res.Message);
            Resultados = new List<ResultadoModel>();
        }
    }

    protected async Task Guardar()
    {
        if (IdCargo == 0)
        {
            _toaster.Error("Debe seleccionar el cargo");
            return;
        }

        if (IdPuesto == 0)
        {
            _toaster.Error("Debe seleccionar un puesto de votación");
            return;
        }
        if (IdMesa == 0)
        {
            _toaster.Error("Debe seleccionar una mesa de votación");
            return;
        }

        var res = await _apiClient.PostAsync<object, List<ResultadoModel>>($"api/Resultados/{IdPuesto}/{IdMesa}/{IdCargo}",
        Resultados);
        if (res.IsSuccess)
        {
            _toaster.Success("Datos guardados correctamente");

        }
        else
        {
            _toaster.Error(res.Message);
        }
    }

    protected async Task AlCargarActa(UploadResult result)
    {

        var res = await _apiClient.GetAsync<string>($"api/Puestos/Acta/{IdMesa}?urlActa={result.Path}");
        if (res.IsSuccess)
        {
            _toaster.Success("Acta registrada correctamente");
        }
        else
        {
            _toaster.Error(res.Message);
        }
    }
}
