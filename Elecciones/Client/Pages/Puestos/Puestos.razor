@page "/Admin/Puestos"

<Card>
    <Header>
        Puesto de votación
    </Header>
    <Body>
        <button class="btn btn-outline-primary mb-3" @onclick="ShowModal">
            <i class="oi oi-plus"></i> Agregar
        </button>

        @if (ListaPuestos == null)
        {
            <p>Cargando...</p>
        }
        else
        {
            if (ListaPuestos.Count == 0)
            {
                <p>No hay puestos registrados</p>
            }
            else
            {
                <div class="row">

                    @foreach (var puesto in ListaPuestos)
                    {
                        <div class="col-lg-4 mb-2">
                            <Card>
                                <Header>
                                    <div class="btn-group float-end">
                                        <button class="btn btn-outline-success btn-sm"
                                                title="Editar"
                                        @onclick="()=>ShowModalPuesto(puesto)">
                                            <i class="oi oi-pencil"></i>
                                        </button>

                                        <button class="btn btn-outline-danger btn-sm"
                                                title="Eliminar"
                                        @onclick="()=>EliminarPuesto(puesto.Id)">
                                            <i class="oi oi-trash"></i>
                                        </button>
                                    </div>
                                    <i class="oi oi-map text-success"></i>
                                    @puesto.Name
                                </Header>
                                <Body>
                                    <p>Mesas: @puesto.Mesas</p>
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-sm btn-outline-success"
                                        @onclick="()=>Open(puesto)">
                                            <i class="oi oi-arrow-right"></i> Mesas
                                        </button>
                                    </div>
                                </Body>
                            </Card>
                        </div>
                    }
                </div>
            }
        }
    </Body>
</Card>


<Modal Title="Agregar puesto" @ref="modal">
    <Content>
        <EditForm Model="CreaPuesto" OnValidSubmit="AgregarPuesto">
            <div class="row">
                <div class="col">
                    <span>Número</span>
                    <input type="number" class="form-control" @bind="CreaPuesto.Number" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col">
                    <span>Nombre</span>
                    <input type="text" class="form-control" @bind="CreaPuesto.Name" placeholder="Nombre de la mesa" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col">
                    <span>Cantidad de meseas</span>
                    <input type="number" class="form-control" @bind="CreaPuesto.TableCount" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col">
                    <button type="submit" class="btn btn-primary"> <i class="oi oi-check"></i> Agregar</button>
                </div>
            </div>
        </EditForm>
    </Content>
</Modal>
<Modal Title="Editar Puesto" @ref="ModalPuesto">
    <Content>
        <EditForm Model="ModelPuesto" OnValidSubmit="EditarPuesto">
            <div class="row mb-3">
                <div class="col">
                    <span>Número</span>
                    <input type="number" class="form-control" @bind="ModelPuesto.Number" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col">
                    <span>Nombre</span>
                    <input type="text" class="form-control" @bind="ModelPuesto.Name" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col">
                    <button type="submit" class="btn btn-outline-primary">
                        <i class="oi oi-check"></i> Guardar
                    </button>
                </div>
            </div>
        </EditForm>
    </Content>
</Modal>
@inject ApiClient _client
@inject IToaster _toaster
@inject SweetAlertService _swal
@inject AppState _appState
@inject NavigationManager _navigation
@code {
    public List<PuestoModel>? ListaPuestos { get; set; }
    public PuestoCreate CreaPuesto { get; set; } = new PuestoCreate();
    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    protected async Task Load()
    {
        var res = await _client.GetAsync<List<PuestoModel>>("api/Puestos");
        if (res.IsSuccess)
        {
            ListaPuestos = res.Model.OrderBy(x=>x.Number).ToList();
            int numero = ListaPuestos.Count == 0 ? 1 : ListaPuestos.Max(x => x.Number) + 1;
            CreaPuesto = new PuestoCreate
                {
                    Number = numero,
                    Name = $"Puesto {numero}",
                    TableCount = 5,
                };
        }
        else
        {
            ListaPuestos = new List<PuestoModel>();
            _toaster.Error(res.Message);
        }
    }

    Modal modal = new Modal();
    protected async Task ShowModal()
    {
        await modal.OpenModal();
    }

    protected async Task AgregarPuesto()
    {
        var res = await _client.PostAsync<string, PuestoCreate>("api/Puestos", CreaPuesto);
        if (res.IsSuccess)
        {
            _toaster.Success(res.Message);

            await Load();
        }
        else
        {
            _toaster.Error(res.Message);
        }

        await modal.CloseModal();
    }

    protected async Task EliminarPuesto(int puestoId)
    {
        var confirm = await _swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de eliminar este puesto de votación? Se eliminarán también las mesas",
                Icon = SweetAlertIcon.Warning,

                ShowCancelButton = true,
                CancelButtonColor = "#28a745",
                CancelButtonText = "Cancelar",

                ShowConfirmButton = true,
                ConfirmButtonColor = "#dc3545",
                ConfirmButtonText = "Eliminar"

            });

        if (confirm.IsDismissed)
        {
            return;
        }
        var res = await _client.DeleteAsync<string>($"api/Puestos/{puestoId}");
        if (res.IsSuccess)
        {
            _toaster.Success(res.Message);
            await Load();
        }
        else
        {
            _toaster.Error(res.Message);
        }
    }

    protected async Task Open(PuestoModel model)
    {
        _appState.Puesto = model;
        _navigation.NavigateTo($"Admin/Puesto");
    }

    Modal ModalPuesto = new Modal();
    public PuestoModel? ModelPuesto { get; set; }
    protected async Task ShowModalPuesto(PuestoModel model)
    {
        ModelPuesto = model;
        await ModalPuesto.OpenModal();
    }

    protected async Task EditarPuesto()
    {
        var res = await _client.PostAsync<object, PuestoModel>($"api/Puestos/{ModelPuesto.Id}", ModelPuesto);
        if (res.IsSuccess)
        {
            _toaster.Success(res.Message);
            await Load();
        }
        else
        {
            _toaster.Error(res.Message);
        }

        await ModalPuesto.CloseModal();
    }
}
